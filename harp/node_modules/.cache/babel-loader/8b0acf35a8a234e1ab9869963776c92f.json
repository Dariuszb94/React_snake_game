{"ast":null,"code":"var _jsxFileName = \"E:\\\\Kodowanie\\\\Snake_game\\\\src\\\\Game.js\";\nimport React, { Component } from 'react';\nimport Cells from './Cells';\nimport { START, BODY, FOOD, KEYS, COLS, ROWS } from './const';\nimport './style.css';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKey = event => {\n      const direction = event.nativeEvent.keyCode;\n    };\n\n    this.state = {\n      board: [],\n      snake: [],\n      direction: null,\n      gameOver: false\n    };\n    this.start = this.start.bind(this);\n    this.frame = this.frame.bind(this);\n  }\n\n  componentDidMount() {\n    this.start();\n  }\n\n  start() {\n    const board = [];\n    const snake = [START];\n    board[START] = BODY;\n    this.setState({\n      board,\n      snake,\n      direction: KEYS.down\n    }, () => {\n      this.frame();\n    });\n  }\n\n  frame() {\n    const _this$state = this.state,\n          snake = _this$state.snake,\n          board = _this$state.board,\n          direction = _this$state.direction;\n    const head = this.getNextIndex(snake[0], direction);\n    const food = board[head] === FOOD || snake.length === 1;\n\n    if (food) {\n      const maxCells = ROWS * COLS;\n      let i;\n\n      do {\n        i = Math.floor(Math.random() * maxCells);\n      } while (board[i]);\n\n      board[i] = FOOD;\n    } else {\n      board[snake.pop()] = null;\n    }\n\n    board[head] = BODY;\n    snake.unshift(head);\n    this.setState({\n      board,\n      snake\n    }, () => {\n      setTimeout(this.frame, 200);\n    });\n  }\n\n  getNextIndex(head, direction) {\n    let x = head % COLS;\n    let y = Math.floor(head / COLS);\n\n    switch (direction) {\n      case KEYS.up:\n        y = y <= 0 ? ROWS - 1 : y - 1;\n        break;\n\n      case KEYS.down:\n        y = y >= ROWS ? 0 : y + 1;\n        break;\n\n      case KEYS.left:\n        x = x <= 0 ? COLS - 1 : x - 1;\n        break;\n\n      case KEYS.right:\n        x = x >= COLS - 1 ? 0 : x + 1;\n        break;\n\n      default:\n        return;\n    }\n\n    return COLS * y + x;\n  }\n\n  render() {\n    const board = this.state.board;\n    return React.createElement(Cells, {\n      handleKey: this.handleKey,\n      board: board,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["E:/Kodowanie/Snake_game/src/Game.js"],"names":["React","Component","Cells","START","BODY","FOOD","KEYS","COLS","ROWS","Game","constructor","props","handleKey","event","direction","nativeEvent","keyCode","state","board","snake","gameOver","start","bind","frame","componentDidMount","setState","down","head","getNextIndex","food","length","maxCells","i","Math","floor","random","pop","unshift","setTimeout","x","y","up","left","right","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Cells from './Cells';\r\nimport {START, BODY, FOOD, KEYS, COLS, ROWS} from './const';\r\nimport './style.css';\r\n\r\n\r\nclass Game extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\nboard:[],\r\nsnake:[],\r\ndirection:null,\r\ngameOver:false\r\n\t\t};\r\n\t\tthis.start=this.start.bind(this);\r\n\t\tthis.frame=this.frame.bind(this);\r\n\t}\r\ncomponentDidMount(){\r\n\tthis.start();\r\n}\r\n\r\n\tstart(){\r\nconst board=[];\r\nconst snake=[START];\r\nboard[START]=BODY;\r\n\r\nthis.setState({\r\n\tboard,\r\n\tsnake,\r\n\tdirection: KEYS.down\r\n},()=>{\r\n\tthis.frame();\r\n});\r\n\t}\r\n\r\n\tframe(){\r\nconst {snake, board, direction}=this.state;\r\nconst head=this.getNextIndex(snake[0],direction);\r\n\r\nconst food=board[head]===FOOD || snake.length === 1; \r\n\r\nif (food){\r\n\tconst maxCells=ROWS * COLS; \r\n\tlet i;\r\n\r\n\tdo{\r\ni=Math.floor(Math.random()*maxCells)\r\n\t}\r\n\twhile(board[i])\r\n\t\tboard[i]=FOOD;\r\n}else{\r\n\tboard[snake.pop()]=null;\r\n}\r\n\r\nboard[head]=BODY;\r\nsnake.unshift(head);\r\n\r\n\r\nthis.setState({\r\n\tboard,\r\n\tsnake\r\n},()=>{\r\n\tsetTimeout(this.frame, 200)\r\n})\r\n\t}\r\n\r\nhandleKey = (event)=>{\r\n\tconst direction=event.nativeEvent.keyCode;\r\n\r\n}\r\n\r\n\r\n\r\n\tgetNextIndex(head, direction){\r\n\t\tlet x=head%COLS;\r\n\t\tlet y=Math.floor(head/COLS);\r\n\r\nswitch(direction){\r\n\tcase KEYS.up: y = y<=0 ? ROWS-1: y-1; break;\r\n\r\n\tcase KEYS.down: y = y>= ROWS ? 0 : y+1; break;\r\n\r\n\tcase KEYS.left: x = x<=0 ? COLS-1 : x-1; break;\r\n\r\n\tcase KEYS.right: x = x>=COLS-1 ? 0 : x+1; break;\r\n\r\n\tdefault: return;\r\n}\r\nreturn (COLS*y)+x;\r\n\t}\r\n\trender(){\r\n\t\tconst {board}=this.state;\r\nreturn (\r\n\t<Cells \r\n\thandleKey={this.handleKey}\r\n\tboard={board}\r\n\t/>\r\n\t)\r\n\t}\r\n}\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}