{"ast":null,"code":"var _jsxFileName = \"E:\\\\Kodowanie\\\\Snake_game\\\\src\\\\Game.js\";\nimport React, { Component } from 'react';\nimport Cells from './Cells';\nimport { START, BODY, FOOD, KEYS, COLS, ROWS } from './const';\nimport './style.css';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: [],\n      snake: [],\n      direction: null,\n      gameOver: false\n    };\n    this.start = this.start.bind(this);\n    this.frame = this.frame.bind(this);\n  }\n\n  componentDidMount() {\n    this.start();\n  }\n\n  start() {\n    const board = [];\n    const snake = [START];\n    board[START] = BODY;\n    this.setState({\n      board,\n      snake,\n      direction: KEYS.right\n    }, () => {\n      this.frame();\n    });\n  }\n\n  frame() {\n    const _this$state = this.state,\n          snake = _this$state.snake,\n          board = _this$state.board,\n          direction = _this$state.direction;\n    const head = this.getNextIndex(snake[0], direction);\n    board[head];\n    board[snake.pop()] = null;\n  }\n\n  getNextIndex(head, direction) {\n    let x = head % COLS;\n    let y = Math.floor(head / COLS);\n\n    switch (direction) {\n      case KEYS.up:\n        y = y <= 0 ? ROWS - 1 : y - 1;\n        break;\n\n      case KEYS.down:\n        y = y >= ROWS ? 0 : y + 1;\n        break;\n\n      case KEYS.left:\n        x = x <= 0 ? COLS - 1 : x - 1;\n        break;\n\n      case KEYS.right:\n        x = x >= COLS ? 0 : x + 1;\n        break;\n\n      default:\n        return;\n    }\n\n    return COLS * y + x;\n  }\n\n  render() {\n    return React.createElement(Cells, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["E:/Kodowanie/Snake_game/src/Game.js"],"names":["React","Component","Cells","START","BODY","FOOD","KEYS","COLS","ROWS","Game","constructor","props","state","board","snake","direction","gameOver","start","bind","frame","componentDidMount","setState","right","head","getNextIndex","pop","x","y","Math","floor","up","down","left","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAAQC,KAAR,EAAeC,IAAf,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,IAAjC,EAAuCC,IAAvC,QAAkD,SAAlD;AACA,OAAO,aAAP;;AAGA,MAAMC,IAAN,SAAmBR,SAAnB,CAA6B;AAC5BS,EAAAA,WAAW,CAACC,KAAD,EAAO;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AACbC,MAAAA,KAAK,EAAC,EADO;AAEbC,MAAAA,KAAK,EAAC,EAFO;AAGbC,MAAAA,SAAS,EAAC,IAHG;AAIbC,MAAAA,QAAQ,EAAC;AAJI,KAAX;AAMA,SAAKC,KAAL,GAAW,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAX;AACA,SAAKC,KAAL,GAAW,KAAKA,KAAL,CAAWD,IAAX,CAAgB,IAAhB,CAAX;AACA;;AACFE,EAAAA,iBAAiB,GAAE;AAClB,SAAKH,KAAL;AACA;;AAEAA,EAAAA,KAAK,GAAE;AACR,UAAMJ,KAAK,GAAC,EAAZ;AACA,UAAMC,KAAK,GAAC,CAACX,KAAD,CAAZ;AACAU,IAAAA,KAAK,CAACV,KAAD,CAAL,GAAaC,IAAb;AAEA,SAAKiB,QAAL,CAAc;AACbR,MAAAA,KADa;AAEbC,MAAAA,KAFa;AAGbC,MAAAA,SAAS,EAAET,IAAI,CAACgB;AAHH,KAAd,EAIE,MAAI;AACL,WAAKH,KAAL;AACA,KAND;AAOE;;AAEDA,EAAAA,KAAK,GAAE;AAAA,wBACwB,KAAKP,KAD7B;AAAA,UACDE,KADC,eACDA,KADC;AAAA,UACMD,KADN,eACMA,KADN;AAAA,UACaE,SADb,eACaA,SADb;AAER,UAAMQ,IAAI,GAAC,KAAKC,YAAL,CAAkBV,KAAK,CAAC,CAAD,CAAvB,EAA2BC,SAA3B,CAAX;AACAF,IAAAA,KAAK,CAACU,IAAD,CAAL;AACAV,IAAAA,KAAK,CAACC,KAAK,CAACW,GAAN,EAAD,CAAL,GAAmB,IAAnB;AAEE;;AAEDD,EAAAA,YAAY,CAACD,IAAD,EAAOR,SAAP,EAAiB;AAC5B,QAAIW,CAAC,GAACH,IAAI,GAAChB,IAAX;AACA,QAAIoB,CAAC,GAACC,IAAI,CAACC,KAAL,CAAWN,IAAI,GAAChB,IAAhB,CAAN;;AAEF,YAAOQ,SAAP;AACC,WAAKT,IAAI,CAACwB,EAAV;AAAcH,QAAAA,CAAC,GAAGA,CAAC,IAAE,CAAH,GAAOnB,IAAI,GAAC,CAAZ,GAAemB,CAAC,GAAC,CAArB;AAAwB;;AAEtC,WAAKrB,IAAI,CAACyB,IAAV;AAAgBJ,QAAAA,CAAC,GAAGA,CAAC,IAAGnB,IAAJ,GAAW,CAAX,GAAemB,CAAC,GAAC,CAArB;AAAwB;;AAExC,WAAKrB,IAAI,CAAC0B,IAAV;AAAgBN,QAAAA,CAAC,GAAGA,CAAC,IAAE,CAAH,GAAOnB,IAAI,GAAC,CAAZ,GAAgBmB,CAAC,GAAC,CAAtB;AAAyB;;AAEzC,WAAKpB,IAAI,CAACgB,KAAV;AAAiBI,QAAAA,CAAC,GAAGA,CAAC,IAAEnB,IAAH,GAAU,CAAV,GAAcmB,CAAC,GAAC,CAApB;AAAuB;;AAExC;AAAS;AATV;;AAWA,WAAQnB,IAAI,GAACoB,CAAN,GAASD,CAAhB;AACE;;AACDO,EAAAA,MAAM,GAAE;AACT,WACC,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAGE;;AA3D2B;;AA6D7B,eAAexB,IAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport Cells from './Cells';\r\nimport {START, BODY, FOOD, KEYS, COLS, ROWS} from './const';\r\nimport './style.css';\r\n\r\n\r\nclass Game extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\nboard:[],\r\nsnake:[],\r\ndirection:null,\r\ngameOver:false\r\n\t\t};\r\n\t\tthis.start=this.start.bind(this);\r\n\t\tthis.frame=this.frame.bind(this);\r\n\t}\r\ncomponentDidMount(){\r\n\tthis.start();\r\n}\r\n\r\n\tstart(){\r\nconst board=[];\r\nconst snake=[START];\r\nboard[START]=BODY;\r\n\r\nthis.setState({\r\n\tboard,\r\n\tsnake,\r\n\tdirection: KEYS.right\r\n},()=>{\r\n\tthis.frame();\r\n});\r\n\t}\r\n\r\n\tframe(){\r\nconst {snake, board, direction}=this.state;\r\nconst head=this.getNextIndex(snake[0],direction);\r\nboard[head]\r\nboard[snake.pop()]=null;\r\n\r\n\t}\r\n\r\n\tgetNextIndex(head, direction){\r\n\t\tlet x=head%COLS;\r\n\t\tlet y=Math.floor(head/COLS);\r\n\r\nswitch(direction){\r\n\tcase KEYS.up: y = y<=0 ? ROWS-1: y-1; break;\r\n\r\n\tcase KEYS.down: y = y>= ROWS ? 0 : y+1; break;\r\n\r\n\tcase KEYS.left: x = x<=0 ? COLS-1 : x-1; break;\r\n\r\n\tcase KEYS.right: x = x>=COLS ? 0 : x+1; break;\r\n\r\n\tdefault: return;\r\n}\r\nreturn (COLS*y)+x;\r\n\t}\r\n\trender(){\r\nreturn (\r\n\t<Cells/>\r\n\t)\r\n\t}\r\n}\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}